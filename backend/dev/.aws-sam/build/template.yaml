AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HMS Backend for Hyderabad deployment with complete infrastructure
Parameters:
  StackEnvironment:
    Type: String
    Default: hyd-dev
    Description: Environment name for resource naming
  TableName:
    Type: String
    Default: HMS-HYD
    Description: DynamoDB table name
  BucketName:
    Type: String
    Description: S3 bucket name (must be globally unique)
  EnableS3EventIngest:
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
    Description: Enable S3 event processing Lambda
Resources:
  HMSHYDTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI2PK
        AttributeType: S
      - AttributeName: GSI2SK
        AttributeType: S
      - AttributeName: LSI_CUR_MRN
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: LSI_CUR_MRN-index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: LSI_CUR_MRN
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      GlobalSecondaryIndexes:
      - IndexName: GSI1PK-index
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: GSI2PK-GSI2SK-index
        KeySchema:
        - AttributeName: GSI2PK
          KeyType: HASH
        - AttributeName: GSI2SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  PatientFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
        - Id: ExpireNoncurrentVersions
          Status: Enabled
          NoncurrentVersionExpirationInDays: 30
        - Id: AbortIncompleteMultipartUploads
          Status: Enabled
          AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
        - Id: IntelligentTiering
          Status: Enabled
          Transitions:
          - TransitionInDays: 0
            StorageClass: INTELLIGENT_TIERING
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          AllowedHeaders:
          - '*'
          ExposedHeaders:
          - ETag
          MaxAge: 3000
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${AWS::StackName}-S3-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment:
          Fn::Sub: HMS Patient Files CDN - ${StackEnvironment}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::GetAtt:
            - PatientFilesBucket
            - RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId:
            Fn::GetAtt:
            - CloudFrontOriginAccessControl
            - Id
        PriceClass: PriceClass_100
  PatientFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PatientFilesBucket
      PolicyDocument:
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${PatientFilesBucket}/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  HMSdevmrnchange:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: HMS-dev-mrn_change-${StackEnvironment}
      CodeUri: HMSdevmrnchange
      Handler: index.handler
      Runtime: nodejs22.x
      MemorySize: 256
      Timeout: 30
      Architectures:
      - x86_64
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
          FILES_BUCKET:
            Ref: PatientFilesBucket
          PRESIGN_EXPIRES_SEC: 900
          CDN_DOMAIN:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
          CF_DISTRIBUTION_ID:
            Ref: CloudFrontDistribution
          CDN_SIGNED: 'false'
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowCredentials: false
          AllowOrigins:
          - '*'
          AllowMethods:
          - '*'
          MaxAge: 0
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:HeadObject
          - s3:ListBucket
          - s3:DeleteObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${PatientFilesBucket}/*
          - Fn::Sub: arn:aws:s3:::${PatientFilesBucket}
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
          Resource:
          - Fn::GetAtt:
            - HMSHYDTable
            - Arn
          - Fn::Sub: ${HMSHYDTable.Arn}/index/*
        - Effect: Allow
          Action:
          - cloudfront:CreateInvalidation
          Resource:
            Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
    Metadata:
      SamResourceId: HMSdevmrnchange
  S3EventsFunction:
    Type: AWS::Serverless::Function
    Condition: EnableS3Events
    Properties:
      FunctionName:
        Fn::Sub: HMS-s3-events-${StackEnvironment}
      CodeUri: S3EventsFunction
      Handler: index.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 60
      Architectures:
      - x86_64
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
          FILES_BUCKET:
            Ref: PatientFilesBucket
          CDN_DOMAIN:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:HeadObject
          Resource:
            Fn::Sub: arn:aws:s3:::${PatientFilesBucket}/*
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - HMSHYDTable
            - Arn
    Metadata:
      SamResourceId: S3EventsFunction
  S3EventsPermission:
    Type: AWS::Lambda::Permission
    Condition: EnableS3Events
    Properties:
      FunctionName:
        Fn::GetAtt:
        - S3EventsFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${PatientFilesBucket}
Conditions:
  EnableS3Events:
    Fn::Equals:
    - Ref: EnableS3EventIngest
    - 'true'
Outputs:
  FunctionUrl:
    Description: Lambda Function URL - Hyderabad
    Value:
      Fn::GetAtt:
      - HMSdevmrnchangeUrl
      - FunctionUrl
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionUrl
  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - DomainName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CloudFrontDomain
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value:
      Ref: CloudFrontDistribution
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CloudFrontDistributionId
  PatientFilesBucketName:
    Description: S3 Bucket for patient files - Hyderabad
    Value:
      Ref: PatientFilesBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PatientFilesBucket
  DynamoDBTable:
    Description: DynamoDB Table - Hyderabad
    Value:
      Ref: HMSHYDTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DynamoDBTable
